// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  isCompany Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  categories Category[]
  proposal Proposal[]
  Sale          Sale[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Proposal {
  id         String        @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  published  Boolean    @default(false)
  status     String
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  receiverId   String
  SaleItems    SaleItem[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  description  String
  users User[]
}

model Sale {
  id                String     @id @default(cuid())
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  checkoutSessionId String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  SaleItems         SaleItem[]
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id])
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  quantity  Int
}